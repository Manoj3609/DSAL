              Experiment no-7

Problem Statement:
There are flight paths between cities. If there is a flight between city A and city B then there is
an edge between the cities. The cost of the edge can be the time that flight take to reach city B
from A, or the amount of fuel used for the journey. Represent this as a graph. The nodecan be
represented by airport name or name of the city. Use adjacency list representation of the graph or
use adjacency matrix representation of the graph. Justify the storage representationused.

input:
#include <iostream>
#include <stdlib.h>
#include <string.h>
using namespace std;

struct node {
    string vertex;
    int time;
    node *next;
};

class adjmatlist {
    int m[10][10], n, i, j;
    char ch;
    string v[20];

public:
    node *head[20];
    node *temp = NULL;

    adjmatlist() {
        for (i = 0; i < 20; i++) {
            head[i] = NULL;
        }
    }

    void getgraph();
    void adjlist();
    void displaym();
    void displaya();
};

void adjmatlist::getgraph() {
    cout << "\nEnter number of cities (max. 20): ";
    cin >> n;

    cout << "\nEnter names of cities: ";
    for (i = 0; i < n; i++)
        cin >> v[i];

    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            cout << "\nIs there a path between city " << v[i] << " and " << v[j] << "? (y/n): ";
            cin >> ch;

            if (ch == 'y') {
                cout << "\nEnter time required to reach city " << v[j] << " from " << v[i] << " in minutes: ";
                cin >> m[i][j];
            } else if (ch == 'n') {
                m[i][j] = 0;
            } else {
                cout << "\nUnknown entry";
            }
        }
    }
    adjlist();
}

void adjmatlist::adjlist() {
    cout << "\n***";
    for (i = 0; i < n; i++) {
        node *p = new node();
        p->next = NULL;
        p->vertex = v[i];
        head[i] = p;
        cout << "\n" << head[i]->vertex;
    }

    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (m[i][j] != 0) {
                node *p = new node();
                p->vertex = v[j];
                p->time = m[i][j];
                p->next = NULL;

                if (head[i]->next == NULL) {
                    head[i]->next = p;
                } else {
                    temp = head[i];
                    while (temp->next != NULL) {
                        temp = temp->next;
                    }
                    temp->next = p;
                }
            }
        }
    }
}

void adjmatlist::displaym() {
    cout << "\n";
    for (j = 0; j < n; j++) {
        cout << "\t" << v[j];
    }

    for (i = 0; i < n; i++) {
        cout << "\n" << v[i];
        for (j = 0; j < n; j++) {
            cout << "\t" << m[i][j];
        }
        cout << "\n";
    }
}

void adjmatlist::displaya() {
    cout << "\nAdjacency list is:";
    for (i = 0; i < n; i++) {
        if (head[i] == NULL) {
            cout << "\nAdjacency list not present";
            break;
        } else {
            cout << "\n" << head[i]->vertex;
            temp = head[i]->next;
            while (temp != NULL) {
                cout << " -> " << temp->vertex;
                temp = temp->next;
            }
        }
    }

    cout << "\nPath and time required to reach cities is:";
    for (i = 0; i < n; i++) {
        if (head[i] == NULL) {
            cout << "\nAdjacency list not present";
            break;
        } else {
            temp = head[i]->next;
            while (temp != NULL) {
                cout << "\n" << head[i]->vertex << " -> " << temp->vertex
                     << "\n[Time required: " << temp->time << " min]";
                temp = temp->next;
            }
        }
    }
}

int main() {
    int m;
    adjmatlist a;

    while (1) {
        cout << "\n\nEnter the choice:";
        cout << "\n1. Enter graph";
        cout << "\n2. Display adjacency matrix for cities";
        cout << "\n3. Display adjacency list for cities";
        cout << "\n4. Exit";
        cin >> m;

        switch (m) {
        case 1:
            a.getgraph();
            break;
        case 2:
            a.displaym();
            break;
        case 3:
            a.displaya();
            break;
        case 4:
            exit(0);
        default:
            cout << "\nUnknown choice";
        }
    }
    return 0;
}


Output:
Enter the choice:
1. Enter graph
2. Display adjacency matrix for cities
3. Display adjacency list for cities
4. Exit
1

Enter number of cities (max. 20): 3

Enter names of cities: pune nagar mumbai

Is there a path between city pune and pune? (y/n): n

Is there a path between city pune and nagar? (y/n): y

Enter time required to reach city nagar from pune in minutes: 180

Is there a path between city pune and mumbai? (y/n): y

Enter time required to reach city mumbai from pune in minutes: 150

Is there a path between city nagar and pune? (y/n): y

Enter time required to reach city pune from nagar in minutes: 180

Is there a path between city nagar and nagar? (y/n): n

Is there a path between city nagar and mumbai? (y/n): y

Enter time required to reach city mumbai from nagar in minutes: 300

Is there a path between city mumbai and pune? (y/n): y

Enter time required to reach city pune from mumbai in minutes: 150

Is there a path between city mumbai and nagar? (y/n): y

Enter time required to reach city nagar from mumbai in minutes: 300

Is there a path between city mumbai and mumbai? (y/n): n

***
pune
nagar
mumbai

Enter the choice:
1. Enter graph
2. Display adjacency matrix for cities
3. Display adjacency list for cities
4. Exit
2

        pune    nagar   mumbai
pune    0       180     150

nagar   180     0       300

mumbai  150     300     0


Enter the choice:
1. Enter graph
2. Display adjacency matrix for cities
3. Display adjacency list for cities
4. Exit
3

Adjacency list is:
pune -> nagar -> mumbai
nagar -> pune -> mumbai
mumbai -> pune -> nagar
Path and time required to reach cities is:
pune -> nagar
[Time required: 180 min]
pune -> mumbai
[Time required: 150 min]
nagar -> pune
[Time required: 180 min]
nagar -> mumbai
[Time required: 300 min]
mumbai -> pune
[Time required: 150 min]
mumbai -> nagar
[Time required: 300 min]

Enter the choice:
1. Enter graph
2. Display adjacency matrix for cities
3. Display adjacency list for cities
4. Exit
4

--------------------------------
Process exited after 288.8 seconds with return value 0
Press any key to continue . . .
