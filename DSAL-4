                  Experiment no-4

Problem Statement: Beginning with an empty binary search tree, Construct binary search
tree by inserting the values in the order given. After constructing a binary tree i.Insert new
node, ii. Find number of nodes in longest path from root, iii. Minimum data value found
in the tree, iv. Change a tree so that the roles of the left and right pointers are swapped at
every node, v. Search a value.

Input:
#include <iostream>
using namespace std;
class node
{
public:
    int data;
    node *left;
    node *right;
};
class bst
{
public:
    node *root;
    bst()
    {
        root = NULL;
    }
    void create();
    void insert();
    void postorder(node *);
    void inorder(node *);
    void preorder(node *);
    void search(int key);
    void minimum();
    int height(node *);
};
void bst::minimum()
{
    node *temp;
    int min;
    temp = root;
    while (temp->left != NULL)
    {
        min = temp->data;
        temp = temp->left;
        if (temp->data < min)
        {
            min = temp->data;
        }
        else
        {
            temp = temp->left;
        }
    }
    cout << "minimum no. is:" << min;
}
int bst::height(node *root)
{
    if (root == NULL)
    {
        return 0;
    }
    else
    {
        if (height(root->right) > height(root->left))
        {
            return (1 + height(root->right));
        }
        else
        {
            return (1 + height(root->left));
        }
    }
}
void bst::create()
{
    node *curr, *temp;
    int ans = 1;
    cout << "enter data:";
    do
    {
        curr = new node;
        cin >> curr->data;
        curr->left = curr->right = NULL;
        if (root == NULL)
        {
            root = curr;
        }
        else
        {
            temp = root;
            while (1)
            {
                if (curr->data <= temp->data)
                {
                    if (temp->left == NULL)
                    {
                        temp->left = curr;
                        break;
                    }
                    else
                    {
                        temp = temp->left;
                    }
                }
                else
                {
                    if (temp->right == NULL)
                    {
                        temp->right = curr;
                        break;
                    }
                    else
                    {
                        temp = temp->right;
                    }
                }
            }
        }
        cout << "want to continue:";
        cin >> ans;
    } while (ans == 1);
}
void bst::inorder(node *root)
{
    if (root != NULL)
    {
        inorder(root->left);
        cout << " " << root->data;
        inorder(root->right);
    }
}
void bst::preorder(node *root)
{
    if (root != NULL)
    {
        cout << " " << root->data;
        preorder(root->left);
        preorder(root->right);
    }
}
void bst::postorder(node *root)
{
    if (root != NULL)
    {
        postorder(root->left);
        postorder(root->right);
        cout << " " << root->data;
    }
}
void bst::insert()
{
    node *curr, *temp;
    int ans = 1;
    cout << "enter data:";
    curr = new node;
    cin >> curr->data;
    curr->left = curr->right = NULL;
    if (root == NULL)
    {
        root = curr;
    }
    else
    {
        temp = root;
        while (1)
        {
            if (curr->data <= temp->data)
            {
                if (temp->left == NULL)
                {
                    temp->left = curr;
                    break;
                }
                else
                {
                    temp = temp->left;
                }
            }
            else
            {
                if (temp->right == NULL)
                {
                    temp->right = curr;
                    break;
                }
                else
                {
                    temp = temp->right;
                }
            }
        }
    }
}
void bst::search(int key)
{
    node *curr;
    curr = root;
    while (curr != NULL)
    {
        if (curr->data == key)
        {
            cout << "found";
            break;
        }
        else
        {
            if (key < curr->data)
            {
                curr = curr->left;
            }
            else
            {
                curr = curr->right;
            }
        }
    }
    if (curr == NULL)
    {
        cout << "not found";
    }
}
int main()
{
    bst b;
    int key, ch;
    do
    {
        cout << "\n1. Create\n2. Insert\n3. Inorder\n4. Preorder\n5. Postorder\n6. Search\n7. Minimum\n8. Height\nPress 0 to exit\n";
        cout << "Enter your choice: ";

        cin >> ch;
        switch (ch)
        {
        case 1:
            b.create();
            break;
        case 2:
            b.insert();
            break;
        case 3:
            cout << "inorder traversal is\n";
            b.inorder(b.root);
            break;
        case 4:
            cout << "preorder traversal is\n";
            b.preorder(b.root);
            break;
        case 5:
            cout << "postorder traversal is\n";
            b.postorder(b.root);
            break;
        case 6:
            cout << "\nenter key:";
            cin >> key;
            b.search(key);
            break;
        case 7:
            b.minimum();
            break;
        case 8:
            cout << "height of tree: " << b.height(b.root);
            break;
        }
    } while (ch != 0);
    return 0;
}
Output:

1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 1
enter data:24
want to continue:0

1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 2
enter data:24

1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 2
enter data:25

1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 2
enter data:13

1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 2
enter data:89

1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 2
enter data:36

1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 2
enter data:41

1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 2
enter data:0

1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 3
inorder traversal is
 0 13 24 24 25 36 41 89
1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 4
preorder traversal is
 24 24 13 0 25 89 36 41
1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 5
postorder traversal is
 0 13 24 41 36 89 25 24
1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 6

enter key:23
not found
1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 7
minimum no. is:0
1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 8
height of tree: 5
1. Create
2. Insert
3. Inorder
4. Preorder
5. Postorder
6. Search
7. Minimum
8. Height
Press 0 to exit
Enter your choice: 0
